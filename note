typef null => object
true => 1
false => 0

函数声明整体提升
变量 声明提升
imply global暗示全局变量
即任何变量，如果变量未经声明就赋值，此变量就为全局变量所有。
a=10  ==> window.a=10;
一切声明的全局变量，全是window的属性
var a=1; ==>window.a=1;

预编译发生在函数执行前一刻
//预编译
创建AO对象  Activetion Object
找形参和变量声明，将变量和形参名作为AO属性名，值为：undefined
将实参值和形参统一
在函数体里面找函数声明，值赋予函数体

function fn(a) {
console.log(a); //function a() {}
var a=123;
console.log(a) //123
function a() {}
console.log(a); //123
var b=function() {}
console.log(b); //function b() {}
function d() {}
}
fn(1);
--------------
global object ===window === GO

//解析
function a() {
   function b() {
      function c() {}
      c();
   }
   b();
}
a();

a defined a.[[scope]] --> 0:GO
a doing a.[[scope]] --> 0:aAO
		   -->  1:GO
b defined b.[[scope]] --> 0:aAO
		   -->  1:GO		  
b doing b.[[scope]] --> 0:bAO
		   -->  1:aAO
		   -->  2:GO
c defined c.[[scope]] --> 0:bAO
		   -->  1:aAO
		   -->  2:GO	
c doing a.[[scope]] 0 -->cAO
		    1 --> bAO
		    2 --> cAO
		    3 --> GO
		
-----------------------------------------------------------
//闭包：
function a() {
   function b() {
   	var bbb=234;
	console.log(aaa);
   }
   var aaa=123;
   return b;
}
var glob=100;
var demo=a();
demo(); //123

function a() {
  var num = 100;
  function b() {
  	num ++;
	console.log(num);
  }
  return b;
}
var demo = a();
demo(); //101
demo(); //102
-----------------------------------------------------------
//立即执行函数 -> 执行完立即释放
(function(a, b, c) { //形参
  console.log(a+b+c);
}(1, 2, 3)); //实参

var num = (function(a, b, c) { 
  var d = a + b + c;
  return d;
}(1, 2, 3));

只有表达式才能被执行符号执行
var test = function() {
	console.log('a'); //a
}();
 
 test(); //undefined;
 
 function test(a, b) {
 	console.log(a+b); // 
 }(1, 2);
 
 +|-|! function test() {
 	console.log('a') //a
 }();
------------------------------------------------------------

##验证手机
function verMobile(val){
    val = parseInt($.trim(val));
    var re = new RegExp("^1[3456789][0-9]{9}$");
    return re.test(val);
}
##UM编辑器过滤获取内容
s.push(item.getContent());
s = s.join("\n");
s = $('<div>'+s+'</div>').find('img').each(function(index, el) {
    $(this)[0].src = $(this)[0].src.split('/').reverse()[0];
}).end().html()


//https://vuejs-templates.github.io/webpack https://www.jianshu.com/p/1626b8643676
const htmlWebpackPlugin = require('html-webpack-plugin');
const UglifyJsPlugin = require('uglifyjs-webpack-plugin');
const ExtractTextPlugin = require('extract-text-webpack-plugin');
const webpack = require('webpack');
const path = __dirname +'/dist/';
module.exports = {
    //devtool: 'eval-source-map',
	entry: {
        'a': './src/js/a.js',
		'b': './src/css/b.css',
        'c': './src/css/c.scss'
	},
	output: {
		path: path,
		filename:'js/[name].js'
	},
	module: {
		rules:[
            {
                test: /\.js$/,
                use: {
                    loader: 'babel-loader',
                    options: {
                        presets:["es2015"]
                    }
                }
            },
            { 
                test: /\.css$/,
                use: ExtractTextPlugin.extract({
                    fallback: 'style-loader',
                    use: [{loader: 'css-loader', options: {minimize: true}}]
                })
            },
            { 
                test: /\.scss$/, //安装失败使用node rebuild node-sass
                use: ExtractTextPlugin.extract({
                    fallback: 'style-loader',
                    use: [{loader: 'css-loader', options: {minimize: true}},{loader: 'sass-loader'}]
                })
                //[{ loader: 'style-loader' }, {loader: 'css-loader'}, {loader: 'sass-loader'}]
            },
            {
                test: /\.(png|jsp|gif|svg)$/,
                use: [{
                    loader: 'url-loader',
                    options: {
                        name: '/assets/[name].[hash:5].[ext]',
                        limit: 20000
                    }
                }]
            }/*,
            {
                test: /\.tpl$/,
                user: 'ejs-loader'
            }*/
		]
	},
	plugins: [
        new htmlWebpackPlugin({
            tempalte:'index.html',
            filename: 'index.html',
            inject: 'body', //js存放标签位置
            title: 'webpack',
            minfy: {
                removeComments: true,
                collapseWhitespace:true
            }
            //excludeChunks: ['b', 'c'], 排除外引入文件
            //chunks: ['a', 'c']
        }),
        
        new UglifyJsPlugin({
            test: /\.js($|\?)/i,

        }),
        new ExtractTextPlugin({
            filename: 'css/[name].css',
            allChunks:true
        }),
        new webpack.LoaderOptionsPlugin({
            minimize: true,
            debug: false,
            options: {
                context: __dirname
            }
        })
    ]
}
